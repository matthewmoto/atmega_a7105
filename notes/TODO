* Test the broadcast and broadcast listening features.

* test the auto rejoin feature by hacking the node-id of one of the radios
  to force it to rejoin and then complete whatever it was doing. Make sure
  this works with all the operations.

* Try using SipHash to reduce your memory footprint by replacing the last-handled
  packet and the last seen broadcast with hashes for comparison (especially if
  these become problems in the future)

* Continue the endless quest to reduce memory footprint

* Start thinking about ways to gaurantee uniqueness for the unique_id's
  Idea: Look for packets with a different node-id and the same unique-ID and 
        send a new type of conflict packet.
    
        This would work because node-id's are regulated so unless you're both 
        already joined as the same node ID, one will get bounced and get a 
        different node-id on join. Thusly, it's a good chance you can catch
        an identical unique ID.

        The behavior would probably be an interrupting re-join on the lower
        node id (since we wouldn't notice if they were identical).  

        NOTE: we'll also have to disable our unique_ID filtering for the 
              pending operation if there is one when we do this so we don't 
              miss data.


